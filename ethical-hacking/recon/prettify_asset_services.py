# Python 3 requirements: xmltodict, tabulate. Note: Shodan cli is needed!
#
# Script to print information related to assets open ports in a pretty way.

import subprocess
import re
import json
import xmltodict
import argparse

from tabulate import tabulate


def numerical_order(text):
	return int(re.search('(\d+)',text).group(0))

parser = argparse.ArgumentParser(
	description='Prints information related to assets open ports in a markdown and HTML.'
)
parser.add_argument('-df', '--domains-file', type=str, help='JSON file generated by domains_to_assets.py', required=True)
parser.add_argument('-nf', '--nmap-file', type=str, help='XML file generated by Nmap', required=False)
parser.add_argument('-sf', '--shodan-file', type=str, help='JSON file generated by Shodan', required=False)
parser.add_argument('-oH', type=str, metavar='HTML_FILE', help='generate a HTML file', required=False)

args = parser.parse_args()
domains_file = args.domains_file
nmap_file = args.nmap_file
shodan_file = args.shodan_file
html_file = args.oH

asset_dict = {}

# Parse shodan
if(shodan_file):
	try:
		shodan_result = subprocess.run(
			['shodan', 'parse', '--fields', 'ip_str,port', '--separator', ',', shodan_file], stdout=subprocess.PIPE
		)
		raw_list = shodan_result.stdout.decode().strip().split('\n')

		for raw_element in raw_list:
			raw_element_split = raw_element.split(',')

			# Create default structure if necessary
			if(not raw_element_split[0] in asset_dict):
				asset_dict[raw_element_split[0]] = {}
				asset_dict[raw_element_split[0]]['ports'] = []
				asset_dict[raw_element_split[0]]['domains'] = []

			asset_dict[raw_element_split[0]]['ports'].append(f'{raw_element_split[1]}/tcp')
	except:
		print('Error parsing Shodan file!')
		exit()

# Parse Nmap
if(nmap_file):
	try:
		with open(nmap_file, 'r') as nmap_file_desc:
		  nmap_info = xmltodict.parse(nmap_file_desc.read())

		for host in nmap_info['nmaprun']['host']:
			if(host['status']['@state'] == 'up'):
				if(not host['address']['@addr'] in asset_dict):
					asset_dict[host['address']['@addr']] = {}
					asset_dict[host['address']['@addr']]['ports'] = []
					asset_dict[host['address']['@addr']]['domains'] = []

				if('port' in host['ports']):
					for port in host['ports']['port']:
						if(
							not isinstance(port,str) and 
							not f'{port["@portid"]}/tcp' in asset_dict[host['address']['@addr']]['ports']):
							asset_dict[host['address']['@addr']]['ports'].append(f'{port["@portid"]}/tcp')
	except:
		print('Error parsing Nmap file!')
		exit()

# Parse domains json
with open(domains_file, 'r') as domains_file_desc:
  domains_json = json.load(domains_file_desc)

for ip in asset_dict:
	if(ip in domains_json):
		for domains_key in domains_json:
			if(re.search(f'{ip}$',domains_key) or re.search(f'{ip},',domains_key)):
				asset_dict[ip]['domains'] = asset_dict[ip]['domains'] + domains_json[domains_key]

# Prepare table
asset_table = []
for ip in asset_dict:
	asset_dict[ip]['ports'].sort(key=numerical_order)
	asset_dict[ip]['domains'].sort()
	asset_table.append(
		['<br />'.join(asset_dict[ip]['domains']), ip, ', '.join(asset_dict[ip]['ports'])]
	)

if(html_file):
	try:
		with open(html_file, 'w') as html_file_desc:
			html_file_desc.write(tabulate(asset_table, headers=['Domains', 'IP/Host', 'Services'], tablefmt='unsafehtml'))
	except:
		print('Error generating HTML!')

markdown_table = tabulate(asset_table, headers=['Domains', 'IP/Host', 'Services'], tablefmt='github')
print(markdown_table.replace('<br />', ', '))
