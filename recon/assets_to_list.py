# Python 3 requirements: Nothing special!
#
# A little auxiliary script for domains_to_assets.py output, will read the JSON and return just a list of domains. You can add discovered IP blocks to the list too.

import json
import argparse
import ipaddress
import re


parser = argparse.ArgumentParser(
	description='The idea of this script is to process the domains_to_assets.py output to make it compatible with other tools that use list of assets and not JSON'
)
parser.add_argument('-if', '--input-file', type=str, help='JSON file generated by domains_to_assets.py', required=True)
parser.add_argument('-ips', type=str, metavar='IPS_FILE', help='add to the domain list a list of IP ranges, the script will filter out those IPs already pointed by domains', required=False)

args = parser.parse_args()
input_file = args.input_file
ips_file = args.ips

try:
	with open(input_file) as input_file_dc:
		assets = json.load(input_file_dc)
except:
	print('Error opening input file!')
	exit()

for asset in assets.keys():
	domains = assets[asset]
	for domain in domains:
		print(domain)

ips_to_print = set()

try:
	if(ips_file):
		with open(ips_file) as ips_file_dc:
			ips_to_filter = ips_file_dc.read().splitlines()

		for ip_to_filter in ips_to_filter:
			for ip in ipaddress.ip_network(ip_to_filter, False):
				if(not any(re.search(f'{str(ip)}$',key) or re.search(f'{str(ip)},',key) for key in assets)):
					ips_to_print.add(str(ip))
except:
	print('Error processing IPs!')
	exit()

for ip_to_print in ips_to_print:
	print(ip_to_print)
